
-content_for :subtabs do
  .navtitle
    &= @user.login

#users_show
  .general-info
    .avatar
      = gravatar @user.email.to_s, :size => 128
      -if current_user == @user
        %div
          =link_to t("users.form.avatar_tip"), "http://gravatar.com", :target => "_blank"
    = link_to "follow", "#", :class => "follow_link"
    -if @user.bio.present?
      .user-info
        = auto_link(@user.bio)
  .clear

  /Questions
  %h2.title
    .counter
      = number_with_delimiter(@questions.total_entries)
    =t(:questions, :scope => "activerecord.models")

  %ul.items#questions
    -@questions.each do |question|
      = render :partial => "questions/question", :object => question
  .additional_info
    = will_paginate @questions, :param_name => "questions_page"
    .clear

  /Favorites
  %h2.title
    .counter
      = number_with_delimiter(@favorites.total_entries)
    =t(:favorites, :scope => "activerecord.models")

  %ul.items#questions
    -@favorite_questions.each do |question|
      = render :partial => "questions/question", :object => question
  .additional_info
    = will_paginate @favorites, :param_name => "favorites_page"
    .clear

  / Answers
  %h2.title
    .counter
      = number_with_delimiter(@answers.total_entries)
    = t(:answers, :scope => "activerecord.models")

  %ul.items#answers
    -@answers.each do |answer|
      = render :partial => "answers/answer", :object => answer
  .additional_info
    = will_paginate @answers, :param_name => "answers_page"
    .clear

  /Badges
  %h2.title
    .counter
      = number_with_delimiter(@badges.total_entries)
    = t(:badges, :scope => "activerecord.models", :default => "Badges")

  %ul.list#badges
    -@badges.each do |badge|
      %li
        = render :partial => "badges/badge", :object => badge, :locals => {:hide_user => true}
  .additional_info
    = will_paginate @badges, :param_name => "badges_page"
    .clear

-content_for :sidebar do
  .block.stats
    .entry
      .text
        = t(:created_at, :scope => "activerecord.attributes.user")
      .data
        = t("time.ago", :time => time_ago_in_words(@user.created_at))
    .entry
      .text
        = t(:last_logged_at, :scope => "activerecord.attributes.user")
      .data
        -if @user.last_logged_at
          = time_ago_in_words(@user.last_logged_at)
    .entry
      .text
        = t(:reputation, :scope => "activerecord.attributes.user")
      .data
        = @user.reputation_on(current_group)
