!!! Strict
%html{ "xml:lang" => I18n.locale, :lang => I18n.locale, :xmlns => "http://www.w3.org/1999/xhtml" }
  %head
    %meta{ :content => "text/html; charset=utf-8", "http-equiv" => "Content-Type" }
    %title
      Shapado - Questions & Answers
    %meta{ :name => "description", :content => "" }
    %meta{ :name => "keywords", :content => "" }
    %link{:rel=>"icon", :type=>"image/png", :href=>"/favicon.ico"}
    -if @feed_urls && !@feed_urls.empty?
      -@feed_urls.each do |title, url|
        %link{:rel=>"alternate", :type=>"application/atom+xml", :title => h(title), :href=> url}

    = javascript_include_tag "jquery", "jquery-ui", "showdown", "jquery.textarea", "application"
    = javascript_include_tag 'jquery.droppy'
    = javascript_include_tag 'modules/sessions.js'
    = javascript_include_tag 'modules/show_question.js'
    = javascript_include_tag 'openid/js/jquery.openid.min.js'
    = yield :js

    = stylesheet_link_tag 'compiled/grid.css', :media => 'screen, projection'
    = stylesheet_link_tag 'compiled/application.css', :media => 'screen, projection'
    = stylesheet_link_tag 'compiled/markdown_editor.css', :media => 'screen, projection'
    = stylesheet_link_tag 'compiled/components/droppy.css', :media => 'screen, projection'
    = stylesheet_link_tag '/javascripts/openid/css/style.css', :media => 'screen, projection'
    = yield :css

  %body
    .two-column
      -if !AppConfig.system_notice.blank?
        #system-msg
          .internal
            = AppConfig.system_notice
      #header
        #logo
          %a{:href => root_path}
            =image_tag "logo.png", :height => "45", :alt => "Shapado"
          %ul#menu_logo
            %li
              = link_to "FAQ", questions_path(:tags => "faq")
            %li
              -if @category
                = link_to category_desc(@category), ""
              -else
                = link_to t("views.layout.categories"), "/"
              %ul
                -category_options.each do |desc, value|
                  %li
                    = link_to(desc, subdomain_url(value))
            %li
              -if @languages && !@languages.empty?
                = link_to language_desc(@languages.first), ""
              -else
                = link_to t("views.layout.languages"), "/"
              %ul
                -if logged_in?
                  -languages_options(current_user.preferred_languages).each do |desc, value|
                    %li
                      = link_to desc, subdomain_url(value)
                -else
                  -languages_options.each do |desc, value|
                    %li
                      = link_to desc, tag_url(value)


        #user-actions
          #user-nav
            -if logged_in?
              .box.right{:style => "width: 50%;"}
                .gravatar.left{:style => "margin: 2px;"}
                  = gravatar current_user.email.to_s
                .row1
                  = link_to h(current_user.login), user_path(current_user)
                  %span{:style => "font-size: 12px; font-weight: bold"}
                    == (#{current_user.reputation.to_i})
                  .right
                    =link_to I18n.t('views.layout.settings'), settings_path
                    |
                    =link_to I18n.t('views.layout.logout'), logout_path
                .row2{:style => "padding: 7px"}
                  -form_tag search_path, :class => "form", :method => :get do
                    = text_field_tag 'q', params[:q], :class => "text-field", :style => "width: 55%"
                    %button{:type => "submit"}
                      = I18n.t('views.layout.search', :default => "Go")
      .clear
      %br
      #navigation{:class => "#{@active_tab}"}
        #menu_primary
          %ul
            %li.questions
              =link_to I18n.t("views.layout.questions"), questions_path
            %li.tags
              =link_to I18n.t("views.layout.tags"), tags_questions_path
            %li.users
              =link_to I18n.t("views.layout.users"), users_path
            %li.unanswered
              =link_to I18n.t("views.layout.unanswered"), unanswered_questions_path
            -if logged_in?
              -current_user.preferred_tags.each do |tag|
                %li{:class => (@active_tag == "tag_#{tag}" ? 'selected' : '' ) }
                  =link_to h(tag), questions_path(:tags => tag)
            %li.ask_question
              =link_to I18n.t("views.layout.ask_question"), new_question_path
      #main-content
        #messages
          -flash.each do |k,v|
            .message{:class => k.to_s}
              .internal.markdown
                = markdown(v)
        #layout
          #content
            .internal
              -if !logged_in?
                .box.highlight
                  -form_tag session_path, :id => 'openid' do
                    &nbsp;
              %br
              = yield
          #sidebar
            .internal
              .questions_count
                -if @questions
                  -if @question.respond_to?(:total_entries)
                    = number_with_delimiter(@questions.total_entries)
                  -else
                    = number_with_delimiter(@questions.size)
                -else
                  = number_with_delimiter(Question.count(language_conditions))
              %p
                questions
              = yield :sidebar
      #footer
        %hr
        %div
          %p
            = link_to AppConfig.site, AppConfig.site
            is a multi-topic and multi-language question-and-answer website service brought to you by #{link_to "Ricodigo.com", "http://ricodigo.com"}. It runs the #{link_to 'Shapado', 'http://gitorious.org/shapado'} question-and-answer software, version 0.1, available under the #{link_to 'GNU Affero General Public License','http://www.fsf.org/licensing/licenses/agpl-3.0.html'}.
        #cc
          %center
            = image_tag('/images/ccby.png')
            == All Shapado.com content and data are available under the #{link_to 'Creative Commons Attribution 3.0 license', 'http://creativecommons.org/licenses/by/3.0/'}.

      = render :partial => "shared/googlean"
      .clear


