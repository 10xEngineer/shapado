-i18n_scope = "questions.show"
- show_close_request_form = !@question.closed && logged_in? && @question.can_be_requested_to_close_by?(current_user)
- show_open_request_form = @question.closed && logged_in? && @question.can_be_requested_to_open_by?(current_user)

- if logged_in?
  - if current_user.mod_of?(current_group) && @question.closed && @question.close_reason.present?
    - show_close_request_form = (@question.close_reason.user_id == current_user.id)
  - @flag = current_user.has_flagged?(@question) || Flag.new

- @flag ||= Flag.new

- if show_open_request_form
  - @open_request = current_user.has_requested_to_open?(@question) || OpenRequest.new

- if show_close_request_form
  - @close_request = @question.close_requests.detect{ |rq| rq.user_id == current_user.id } || CloseRequest.new(:reason => "dupe")

.toolbar
  %ul.drop-menu



    %li.answer
      = link_to t("questions.question.answer_verb"), "#", :id => "add_answer", :class => "show_form"



    %li.follow
      - if current_user && @question.follower?(current_user)
        = link_to t('global.unfollow'), unfollow_question_path(@question), :class => 'unfollow-q question-action', "data-undo" =>  follow_question_path(@question), "data-title" => t("#{i18n_scope}.follow_tooltip"), :title => t("#{i18n_scope}.unfollow_tooltip"), 'data-text' => t('global.follow')
      - else
        = link_to t('global.follow'), follow_question_path(@question), :title => t("#{i18n_scope}.follow_tooltip"), :class => 'follow-q question-action', "data-undo" =>  unfollow_question_path(@question), "data-title" => t("#{i18n_scope}.unfollow_tooltip"), 'data-text' => t('global.unfollow')


    %li.share_on
      = link_to t('global.share'), "#", :id => "share_question", :class => "show_form"


    - if !@flag.new_record?
      %li.flagged
        %span.flag-link
          Flagged by you
          -#i18n
        %ul.drop-menu
          %li
            %p
              = t(@flag.reason, :scope=>'flags.form')
              = link_to t("scaffold.edit"), edit_question_flag_path(@question,@flag), :id => "edit_question_flag_link", :class => "flag-link show_form", :rel => 'nofollow', "data-lazy" => "1", "data-form-target" => "flag_question"
              = link_to t("scaffold.destroy"), question_flag_path(@question,@flag), :id => "destroy_question_flag_link", :rel => 'nofollow', :confirm => "are you sure?", :method => :delete
    - elsif logged_in? && current_user != @question.user
      %li.no-spam
        = link_to t("#{i18n_scope}.flag"), new_question_flag_path(@question), :id => "flag_question", :class => "flag-link", "data-lazy" => "1", :rel => 'nofollow', :class => "show_form"





    - if logged_in? && (current_user.mod_of?(current_group) || current_user.can_view_offensive_counts_on?(current_group))
      %li.more.requests
        -# i18n
        = link_to "Requests"
        %ul.drop-menu
          -unless @question.flags.count == 0
            %li
              = t(:flags, :scope => "activerecord.models")
              = render :partial => "flags/list", :locals => {:flaggeable => @question}

          -unless @question.close_requests.size == 0
            %li
              = t(:prural_name, :scope => "close_requests.model")
              = render :partial => "close_requests/list", :locals => {:question => @question}

          -unless @question.open_requests.size == 0
            %li
              = t(:prural_name, :scope => "open_requests.model")
              = render :partial => "open_requests/list", :locals => {:question => @question}



    - if show_close_request_form &&!@close_request.new_record?
      -# i18n
      %li.more.request-close
        = link_to  "Your close request"
        =#t("#{i18n_scope}.requested_close_as")
        %ul.drop-menu
          %li
            %p
              = t(@close_request.reason, :scope=>'close_requests.form')
              = link_to "Edit", edit_question_close_request_path(@question,@close_request), :id => "edit_question_close_request_link", :rel => 'nofollow', "data-lazy" => "1"
              = link_to "Retract", question_close_request_path(@question,@close_request), :id => "destroy_question_close_request_link", :rel => 'nofollow', :confirm => "are you sure?", :method => :delete



    %li.more.current
      = link_to t('#{i18n_scope}.more_actions')

      %ul
        %li.activity
          = link_to t("#{i18n_scope}.history")+" (#{@question.versions_count})", history_question_path(@question)


        %li.followUp
          = link_to t("#{i18n_scope}.follow_up"), new_question_path(:from_question => @question.id), :rel => "nofollow", :title => t("#{i18n_scope}.follow_up_description")

        - if logged_in?
          -if current_user.can_create_reward?(@question)
            %li.add_reward
              = link_to t("#{i18n_scope}.create_reward"), "#", :rel => "nofollow", :id => "add_reward", :class => "show_form", :title => t("#{i18n_scope}.create_reward_description")


          - if show_close_request_form && @close_request.new_record?
            %li.spam
              = link_to t("#{i18n_scope}.request_closing"), @close_request.new_record? ? new_question_close_request_path(@question) : edit_question_close_request_path(@question, @close_request), :id => "request-close-link", :class => "show_form", "data-lazy" => "1", :rel => 'nofollow', :title => t("#{i18n_scope}.request_closing_details")

          - if (@question.wiki && current_user.can_edit_wiki_post_on?(@question.group)) || current_user.can_edit_others_posts_on?(@question.group) || current_user.can_modify?(@question)
            %li.edit-q
              = link_to t('scaffold.edit'), edit_question_path(@question)
          - if (current_user.can_modify?(@question) || current_user.owner_of?(@question.group))
            %li.delete-q
              = link_to t("scaffold.destroy"), question_path(@question), :confirm => "are you sure?", :method => :delete

          -if current_user.mod_of?(@question.group) && !@question.closed
            %li.close
              = link_to t('#{i18n_scope}.close'), question_close_requests_path(@question)

        - if show_open_request_form
          -if !@open_request.new_record?
            %li.open
              = "#{t('#{i18n_scope}.requested_reopening')} #{@open_request.comment}"
              = link_to t("#{i18n_scope}.edit_request"), edit_question_open_request_path(@question, @open_request), :id => "edit_question_open_request_link", :rel => 'nofollow'
              = link_to t("#{i18n_scope}.retract_request"), question_open_request_path(@question,@open_request), :id => "destroy_question_open_request_link", :rel => 'nofollow', :confirm => "are you sure?", :method => :delete

          -if current_user.mod_of?(current_group)
            %li.open
              = link_to t("#{i18n_scope}.open"), open_question_path(@question), :rel => 'nofollow', :title => t("#{i18n_scope}.request_opening_details"), :method => "put"

          -else
            %li.open
              = link_to t("#{i18n_scope}.request_opening"), new_question_open_request_path(@question), :id => "request-open-link", :rel => 'nofollow', :title => t("#{i18n_scope}.request_opening_details")

          - if (current_user.can_modify?(@question) || current_user.owner_of?(@question.group))
            %li.ban
              = link_to @question.banned ? t("#{i18n_scope}.unban") : t("#{i18n_scope}.ban"), manage_moderate_questions_path(:question_ids => [@question.id], :commit => @question.banned ? "unban": "ban"), :method => :put, :confirm => "are you sure?"
            %li.delete
              = link_to t("scaffold.destroy"), question_path(@question.id), :confirm => "are you sure?", :method => :delete


  #panel-forms
    = render "reward_form"

    -unless @question.closed
      =form_for [@question, @answer ||= Answer.new], :html => {:class => "add_answer markdown"} do |f|

        = render :partial => "answers/form", :locals => {:f => f, :markdown => true, :question => @question}

        .field.form-options
          .column
            .checkbox
              = f.label :wiki, "Wiki"
              = f.check_box :wiki, :class => "checkbox"
          - if logged_in? && current_group.enable_anonymous
            .column
              .checkbox
                = f.label :anonymous, t("scaffold.post_as_anonymous"), :class => "radio"
                = f.check_box :anonymous, {:class => "checkbox"}, true, false

          -if AppConfig.mailing && AppConfig.mailing["activate"]
            .column.by_mail
              %a{:href => "mailto:#{@question.email}"}
                Answer by email
                -#i18n

          .buttons
            = submit_tag t('answers.form.submit'), :class => "save"
            = link_to t('scaffold.cancel'), '', :class => 'cancel'
            = t("global.or")

    =form_tag "", :class => "share_question" do
      %h1
        Share this on:
      %ul
        %li.facebook
          =link_to "Facebook"
        %li.twitter
          =link_to "Twitter"
        %li.identica
          =link_to "Identi.ca"
        %li.digg
          =link_to "Digg"
        %li.blogger
          =link_to "Blogger"
        %li.delicious
          =link_to "Delicious"
        %li.linkedin
          =link_to "LinkedIn"
        %li.misterwong
          =link_to "Mister Wong"
        %li.stumbleupon
          =link_to "StumbleUpon"
        %li.googlebuzz
          =link_to "Google Buzz"
        %li.friendster
          =link_to "Friendster"
      .clear

    .clear