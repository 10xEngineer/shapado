= javascript_include_merged(:show).html_safe
= include_latex

- @current_class = 'question hentry entry post'

- show_close_request_form = !@question.closed && logged_in? && @question.can_be_requested_to_close_by?(current_user)
- show_open_request_form = @question.closed && logged_in? && @question.can_be_requested_to_open_by?(current_user)

- if logged_in?
  - if current_user.mod_of?(current_group) && @question.closed
    - show_close_request_form = (@question.close_reason.user_id == current_user.id)
  - @flag = current_user.has_flagged?(@question) || Flag.new

- @flag ||= Flag.new

- if show_open_request_form
  - @open_request = current_user.has_requested_to_open?(@question) || OpenRequest.new

- if show_close_request_form
  - @close_request = @question.close_requests.detect{ |rq| rq.user_id == current_user.id } || CloseRequest.new(:reason => "dupe")

- question_body = find_and_preserve(shapado_auto_link(markdown(@question.body.present? ? @question.body : @question.title)))

- content_for :head do
  %meta{:name => "keywords", :content => clean_seo_keywords(@question.tags.dup, @question.title)}
  %meta{:name => "description", :content => question_body.gsub(/<\/?[^>]*>/, "")[0, 255] }
  %link{:rel => "canonical", :href => question_url(@question) }

%section.main-question
  %h1
    &= @question.title
    - if @question.closed
      =" [#{t("closed", :scope => "activerecord.attributes.question").upcase}]"
  .edit
    = link_to "Editar"
          
      
  .description
    = question_body
     
  .toolbar
    %ul
      %li.answer
        = link_to "Responder", "#", :class => "btn-slide"
      %li.comment
        = link_to "Comentar"
      %li.follow
        - if current_user && @question.follower?(current_user)
          = link_to "Unfollow", unfollow_question_path(@question), :class => 'unfollow-q', "data-undo" =>  follow_question_path(@question), "data-title" => t(".watch_tooltip"), :title => t(".unwatch_tooltip"), :id => "watch-question"
        - else
          = link_to "Follow", follow_question_path(@question), :title => t(".watch_tooltip"), :class => 'follow-q', "data-undo" =>  unfollow_question_path(@question), "data-title" => t(".unwatch_tooltip"), :id => "watch-question"
      %li.spam
        = link_to "Reportar"
      %li.share
        = link_to "Compartir"
      
      - if @question.versions.count > 0
        %li.activity
          = link_to t(".history", :default => "history"), history_question_path(@question)
      - if (current_user.can_modify?(@question) || current_user.owner_of?(@question.group))
        %li.activity
          = link_to t("scaffold.destroy"), question_path(@question.id), :confirm => "are you sure?", :method => :delete
      - if current_user.mod_of?(@question.group)
        %li.activity
          -if !@question.closed
            = link_to t('.close'), question_close_requests_path(@question)
          = link_to @question.banned ? t(".unban") : t(".ban"), manage_moderate_questions_path(:question_ids => [@question.id], :commit => @question.banned ? "unban": "ban"), :class => "button", :method => :put, :confirm => "are you sure?"

      %li.followUp
        = link_to "Follow Up", new_question_path(:from_question => @question.id), :rel => "nofollow"  
      
      - if !@flag.new_record?
        %li.flag
          = "#{t('.flagged_as')} #{t(@flag.reason, :scope=>'flags.form')}"
          = link_to t("scaffold.edit"), edit_question_flag_path(@question,@flag), :class => "flag-link", :id => "edit_question_flag_link", :rel => 'nofollow'
          = link_to t("scaffold.destroy"), question_flag_path(@question,@flag), :id => "destroy_question_flag_link", :rel => 'nofollow', :confirm => "are you sure?", :method => :delete
      - elsif logged_in? && current_user != @question.user
        %li.flag
          = link_to t(".flag"), new_question_flag_path(@question), :class => "flag-link", :id => "question_flag_link", :rel => 'nofollow'

      - if logged_in?
        - if show_close_request_form
          %li.flag
            -if !@close_request.new_record?
              = "#{t('.requested_close_as')} #{t(@close_request.reason, :scope=>'close_requests.form')}"
              = link_to t(".edit_request"), edit_question_close_request_path(@question,@close_request), :class => "flag-link", :id => "edit_question_close_request_link", :rel => 'nofollow'
              = link_to t(".retract_request"), question_close_request_path(@question,@close_request), :id => "destroy_question_close_request_link", :rel => 'nofollow', :confirm => "are you sure?", :method => :delete
            = link_to t(".request_closing"), @close_request.new_record? ? new_question_close_request_path(@question) : edit_question_close_request_path(@question, @close_request), :id => "request-close-link", :rel => 'nofollow', :title => t('.request_closing_details')

        - if show_open_request_form
          -if !@open_request.new_record?
            %li.flag
              = "#{t('.requested_reopening')} #{@open_request.comment}"
              = link_to t(".edit_request"), edit_question_open_request_path(@question, @open_request), :class => "flag-link", :id => "edit_question_open_request_link", :rel => 'nofollow'
              = link_to t(".retract_request"), question_open_request_path(@question,@open_request), :id => "destroy_question_open_request_link", :rel => 'nofollow', :confirm => "are you sure?", :method => :delete

          -if current_user.mod_of?(current_group)
            %li.flag
              = link_to t(".open"), open_question_path(@question), :rel => 'nofollow', :title => t('.request_opening_details'), :method => "put"
          -else
            %li.flag
              = link_to t(".request_opening"), new_question_open_request_path(@question), :id => "request-open-link", :rel => 'nofollow', :title => t('.request_opening_details')

        - if (@question.wiki && current_user.can_edit_wiki_post_on?(@question.group)) || current_user.can_edit_others_posts_on?(@question.group) || current_user.can_modify?(@question)
          %li.flag
            = link_to t('scaffold.edit'), edit_question_path(@question), :class => "button"

    #panel.add-answer
      -unless @question.closed
        -form_for @answer, :url => question_answers_path(@question.id), :html => {:class => "form mainAnswerForm"} do |f|
          = render :partial => "answers/form", :locals => {:f => f, :markdown => true}
          = f.label :wiki, "Wiki", :class => "radio"
          = f.check_box :wiki, :class => "checkbox"
          = f.label :anonymous, t("scaffold.post_as_anonymous"), :class => "radio"
          = f.check_box :anonymous, {:class => "checkbox"}, true, false
          = submit_tag t('answers.form.submit'), :class => "button"
      .clear

%ul.tag-list
  %li.title
    Topics:  
  - @question.tags.each do |tag|
    %li
      = link_to h(tag), tag_path(:id => tag), :rel => "tag"
  - if logged_in? && (current_user.can_modify?(@question) || current_user.can_retag_others_questions_on?(current_group))
    %li.retag
    = link_to t('.retag'), retag_question_path(@question), :id => 'retag'

#answers-content-wrap
  %header
    %h3 
      = t(".answers_title", :count => @answers.total_entries)

  %section.filters
    %ul{:class => @active_subtab.to_s}
      %header Sort By:
      %li.newest-active
        = link_to t("questions.index.newest"), question_path(@question, :sort=>"newest", :anchor => "answers"), :rel => "nofollow"
      %li.votes-active
        = link_to t("questions.index.votes"), question_path(@question, :sort=>"votes", :anchor => "answers"), :rel => "nofollow"
      %li.oldest-active
        = link_to t("questions.index.oldest"), question_path(@question, :sort=>"oldest", :anchor => "answers"), :rel => "nofollow"
      %li
        = link_to "Respuesta elegida" 

  .error
    - source = question_path(@question)
    = error_messages_for 'answer'

  .followUp-content
    -if @question.follow_up
      %h1 This Question Is a Follow Up Of
      = link_to @question.follow_up.original_question.title, question_path(@question.follow_up.original_question)+"##{@question.follow_up.original_answer_id}"

    -if @question.followed_up_by.limit(1).count > 0
      %h1 Followed by:
      -@question.followed_up_by.all.each do |child|
        = link_to child.title, question_path(child)
        
    - if @question.closed && @question.close_reason.present?
      #close_reason
        = t(".close_reason")
        = t(@question.close_reason.reason, :scope=>"close_requests.form")
        - if !@question.close_reason.comment.empty?
          .comment
            =find_and_preserve(shapado_auto_link(@question.close_reason.comment))
    
    .followUp-reason      
      = render "reward_form"    

  - if @question.accepted
    -solution = @question.answer
    =render :partial=> "answer", :locals=> {:question => @question, :answer => solution} unless solution.nil?
  .hentry
    -@answers.each do |answer|
      -next if answer.id == @question.answer_id
      =render :partial=> "answer", :locals=> {:question => @question, :answer => answer}
  =will_paginate(@answers)




-content_for :sidebar do
  = render "shared/widgets", :context => 'question'
