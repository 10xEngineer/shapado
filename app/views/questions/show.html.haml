-content_for :css do
  = stylesheet_link_tag 'compiled/components/show_question.css'

= error_messages_for :answer

-flag = Flag.new

#question
  =vote_box(@question, question_path(@question))
  #question-title
    %h2
      = h @question.title
  #question-body.markdown
    = markdown(@question.body)
  .buttons
    -if logged_in?
      -if current_user.can_modify?(@question)
        = link_to I18n.t('scaffold.edit'), edit_question_path(@question), :class => "button"
        or
        = link_to I18n.t('scaffold.back'), questions_path, :class => "button cancel"
      -if current_user.moderator?
        = link_to "ban", ban_path(:question_ids => [@question.id]), :class => "button", :confirm => "are you sure?"

  .internal.actions{:style => "background: #DFDFDF; margin: 2px"}
    -if current_user != @question.user
      .left.internal
        = link_to t("views.questions.show.flag"), flag_question_path(@question), :class => "flag-link"
    -if AppConfig.enable_sharing
      .right
        %h2
          = t("views.questions.show.share")
        .buttons{:style => "padding: 2px"}
          = render :partial => "twitter"
          = render :partial => "identica"
          = render :partial => "facebook"
    .clear
  -if current_user != @question.user
    .flag_form.hidden
      -flag.flaggeable = @question
      = render :partial => "flags/form", :locals => {:flag => flag, :source => question_path(@question) }

%hr
#answers
  -if @question.answered
    %h2
      = t("solution", :scope => "views.questions.show")
    =render :partial=> "answer", :locals=> {:question => @question, :answer => @question.answer, :solution => true}
    -@answers.delete(@question.answer)
    %hr
    %h2
      = h(t("another_answers", :scope => "views.questions.show"))
    -@answers.each do |answer|
      =render :partial=> "answer", :locals=> {:question => @question, :answer => answer}
  -else
    %h2
      = h(I18n.t('views.questions.show.answers'))
    -@answers.each do |answer|
      =render :partial=> "answer", :locals=> {:question => @question, :answer => answer}
  =will_paginate(@answers)

%hr
-unless @question.answered
  -form_for @answer, :url => question_answers_path(@question.id, @answer), :html => {:class => "form mainAnswerForm"} do |f|
    = render :partial => "answers/form", :locals => {:f => f, :markdown => true}
    = submit_tag I18n.t('views.answers.form.submit')
  %hr

-content_for :sidebar do
  %b
    = I18n.t('activerecord.attributes.question.asked_by')
  = link_to h(@question.user.login), user_path(@question.user)
  %b
    = time_ago_in_words(@question.created_at)
  %br
  %b
    = I18n.t('activerecord.attributes.question.category')
  = category_desc h(@question.category)
  %br
  %h1
    = h(I18n.t('views.questions.sidebar.tags', :default => [:"views.layout.tags", :"activerecord.attributes.user.tags", "tags"]).to_s.capitalize)
  .tags-list
    -@question.tags.each do |tag|
      %span.tag
        = link_to h(truncate(tag, :length => 15)), questions_path(:tags => tag)
  .clear
  -if @question.flags_count > 0
    %h1= t("views.questions.show.flags")
    = render :partial => "flags/list", :locals => {:flaggeable => @question}
