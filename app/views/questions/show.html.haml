-require_js 'jsMath/easy/load.js'

-content_for :subtabs do
  .navtitle
    &= @question.title

-source = question_path(current_languages, @question)

#question-vote-col
  -if current_user && @question.watch_for?(current_user)
    = link_to image_tag("layer-visible-on.png"), unwatch_question_path(current_languages, @question)
  -else
    = link_to image_tag("layer-visible-off.png"), watch_question_path(current_languages, @question), :title => t(".watch_tooltip")

  =vote_box(@question, question_path(current_languages,@question))

  -if logged_in? && favorite = current_user.favorite(@question)
    =link_to image_tag("favorites.png"), unfavorite_question_path(current_languages, @question), :id => "unfavorite-link"
  -else
    =link_to image_tag("unfavorites.png"), favorite_question_path(current_languages, @question), :id => "favorite-link"
  .favorites_count
    &= @question.favorites_count

#question-body-col.commentable.markdown
  #body
    -if @question.body.present?
      =find_and_preserve(shapado_auto_link(markdown(@question.body)))
    -else
      =markdown(@question.title)

  .tag-list
    -@question.tags.each do |tag|
      %span.tag
        = link_to h(tag), questions_path(:language => current_languages, :tags => tag)
  .user_info
    .gravatar
      = gravatar(@question.user.email.to_s, :size => 32)
    .user_data
      %span.asked_by
        = t('activerecord.attributes.question.asked_by')
      = link_to h(@question.user.login), user_path(@question.user)
      %span.time_ago
        = t("time.ago", :time => time_ago_in_words(@question.created_at))
      -if !@question.user.hide_country
        = t("global.from", :site => @question.user.country_name)
        = country_flag(@question.user.country_code, @question.user.country_name)
    -if @question.wiki
      .wiki_flag
        wiki
    .clear
  .controls
    .actions
      =link_to t(".flag"), flag_question_path(current_languages, @question), :class => "flag-link", :rel => 'nofollow'
      -if logged_in?
        -if current_user.can_edit_others_posts_on?(@question.group) || current_user.can_modify?(@question)
          = link_to t('scaffold.edit'), edit_question_path(current_languages, @question), :class => "button"
        =link_to t("comments.shared.add_comment"), "#", :id => "add_comment_link", :rel => 'nofollow'
        -if @question.versions.count > 0
          = link_to t(".history", :default => "history"), history_question_path(current_languages, @question)

        -if current_user.mod_of?(@question.group)
          %br
          = link_to "ban", ban_path(:question_ids => [@question.id]), :class => "button", :confirm => "are you sure?"
    .forms
      -flag = Flag.new
      - flag.flaggeable = @question
      = render :partial => "flags/form", :locals => {:flag => flag, :source => source }

      -form_tag comments_path, :class => "form commentForm", :id => "add_comment_form" do
        -@comment = Comment.new
        = render :partial => "comments/form", :locals => {:source => source, :commentable => @question}
        .group.navform
          = submit_tag t("comments.shared.comment_submit"), :class => "button"
  .comments
    -@question.comments.each do |comment|
      = render :partial => "comments/comment", :object => comment, :locals => {:source => source, :mini => true}
.clear


%a{:name=>"answers"}

#answers
  .secondary-navigation{:class => @active_subtab.to_s}
    .navtitle
      = t(".answers_title", :count => @answers.total_entries + (@question.answered ? 1 : 0))

    %ul
      %li.newest
        = link_to t("questions.index.newest"), question_path(current_languages, @question, :sort=>"newest", :anchor => "answers")
      %li.votes
        = link_to t("questions.index.votes"), question_path(current_languages, @question, :sort=>"votes", :anchor => "answers")
      %li.oldest
        = link_to t("questions.index.oldest"), question_path(current_languages, @question, :sort=>"oldest", :anchor => "answers")
    .clear
  .block
    -if @question.answered
      -solution = @question.answer
      =render :partial=> "answer", :locals=> {:question => @question, :answer => solution} unless solution.nil?
    -@answers.each do |answer|
      =render :partial=> "answer", :locals=> {:question => @question, :answer => answer}
    =will_paginate(@answers)

%a{:name=>"to_answer"}
-form_for @answer, :url => question_answers_path(current_languages, @question.id), :html => {:class => "form mainAnswerForm"} do |f|
  = render :partial => "answers/form", :locals => {:f => f, :markdown => true}
  .group.navform
    .right
      = f.label :wiki, "Wiki", :class => "radio"
      = f.check_box :wiki, :class => "checkbox"
    = submit_tag t('answers.form.submit'), :class => "button"
  .clear

-content_for :sidebar do
  -if logged_in? && (current_user.mod_of?(current_group) || current_user.can_view_offensive_counts_on?(current_group))
    .block
      %h3
        = t(:flags, :scope => "activerecord.models")
      .content
        = render :partial => "flags/list", :locals => {:flaggeable => @question}

  .block
    %h3
      = t('.tags', :default => [:"layouts.application.tags", :"activerecord.attributes.user.tags", "tags"])
    = render :partial => "shared/tag_list", :object => @tag_cloud
    .clear

  -if @question.badges.size > 0
    .block
      %h3
        = t('badges', :scope => "activerecord.models")
      .content
        %ul.list
          -@question.badges.each do |badge|
            %li
              = render :partial => "badges/badge", :object => badge, :locals => {:hide_user => false}

  .block.stats
    -if @question.group_id != current_group.id
      = t(".asked_on")
      &= @question.group.name

    .entry
      .text.asked
        = t('activerecord.attributes.question.created_at')
      .data
        = t("time.ago", :time => time_ago_in_words(@question.created_at))
    .entry
      .text.viewed
        = t('.viewed')
      .data
        = t('number.x_time', :count => number_with_delimiter(@question.views_count))
    .entry
      .text.last_activity
        = t(".last_activity")
      .data
        = t("time.ago", :time => time_ago_in_words(@question.activity_at))
  -if AppConfig.enable_sharing
    .block
      %h3
        = t(".share")
      .content
        %ul.navigation
          %li
            = render :partial => "twitter"
          %li
            = render :partial => "identica"
          %li
            = render :partial => "facebook"

  -related_questions = Question.related_questions(@question, :language => find_languages)
  -if !related_questions.empty?
    .block
      %h3
        =t(".related_questions")
      .content
        %ul.list
          -related_questions.each do |rq|
            %li
              =link_to h(rq.title), question_path(current_languages, rq), :title => truncate(rq.body, :length => 200)
