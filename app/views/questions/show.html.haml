= stylesheet_link_tag 'compiled/components/show_question.css'

= error_messages_for :answer

#question
  =vote_box
  #question-title
    %h2
      = h @question.title
  #question-body.markdown
    = markdown(@question.body)
  -if logged_in? && current_user.can_modify?(@question)
    .buttons
      = link_to I18n.t('scaffold.edit'), edit_question_path(@question), :class => "button"
      or
      = link_to I18n.t('scaffold.back'), questions_path, :class => "button cancel"

%hr

#answers
  -if @question.answered
    %h2
      = t("solution", :scope => "views.questions.show")
    =render :partial=> "answer", :locals=> {:answer => @question.answer, :solution => true}
    -@answers.delete(@question.answer)
    %hr
    %h2
      = h(t("another_answers", :scope => "views.questions.show"))
    -@answers.each do |answer|
      =render :partial=> "answer", :locals=> {:answer => answer}
  -else
    %h2
      = h(I18n.t('views.questions.show.answers'))
    -@answers.each do |answer|
      =render :partial=> "answer", :locals=> {:answer => answer}


%hr
-unless @question.answered
  -form_for @answer, :html => {:class => "form"} do |f|
    = render :partial => "answers/form", :locals => {:f => f}
    = submit_tag I18n.t('views.answers.form.submit')
  %hr

-content_for :sidebar do
  %b
    = I18n.t('activerecord.attributes.question.asked_by')
  = link_to h(@question.user.login), user_path(@question.user)
  %b
    = time_ago_in_words(@question.created_at)
  = link_to h(@question.user.login), user_path(@question.user)
  %br
  %b
    = I18n.t('activerecord.attributes.question.category')
  = category_desc h(@question.category)
  %br
  %h1
    = h(I18n.t('views.questions.sidebar.tags', :default => [:"views.layout.tags", :"activerecord.attributes.user.tags", "tags"]).to_s.capitalize)
  .tags-list
    -@question.tags.each do |tag|
      %span.tag
        = link_to h(truncate(tag, :length => 15)), questions_path(:tags => tag)
  .clear
