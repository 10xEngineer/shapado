= f.error_messages
= error_messages_for(:user)

-if @original_question
  This is a follow up of
  =link_to @original_question.title, question_path(@original_question), :target => "_blank"
  -if @original_answer
    %em
      =@original_answer.body
    = hidden_field_tag :original_answer_id, @original_answer.id

  = hidden_field_tag :original_question_id, @original_question.id

.group
  = hidden_field_tag "question[position][lat]", @question.position.lat, :class => "lat_input"
  = hidden_field_tag "question[position][long]", @question.position.long, :class => "long_input"
.group
  = f.label :title, "#{t(:title, :scope => "activerecord.attributes.question")}*", :class => "label"
  = f.text_field :title, :class => "text_field"
  .description
    = raw(current_group.question_prompt)

.group
  = f.label :tags, "#{t(:tags, :scope => "activerecord.attributes.question")}", :class => "label"
  = f.text_field :tags, :value => @question.tags.join(", "), :class => "text_field autocomplete_for_tags"
  .description
    = t(".tags_tip")

.group
  %label.label#rqlabel
    =t(".related_questions", :default => :"questions.show.related_questions" )
  %ul.items#related_questions

.group
  = f.label :body, t(:body, :scope => "activerecord.attributes.question"), :class => "label"
  -if current_group.wysiwyg_editor
    = f.text_area :body, :class => "text_area", :id => "wysiwyg_editor", :value => markdown(@question.body)
  -else
    = f.text_area :body, :class => "text_area", :id => "markdown_editor"

    #markdown_preview.markdown
      =markdown(@question.body)

.group
  -if !@question.new_record?
    = render "attachments", :question => @question, :attachments => @question.attachments
  #attachments
    #fields
      .attachment_field.template
        = f.file_field "attachments[0]"
        = link_to "-", "#", :class => "remove_attachment"

    = link_to "+", "#", :class => "add_attachment"

-if current_group.language.nil? && AppConfig.enable_i18n
  .group
    = f.label :language, t(:language, :scope => "activerecord.attributes.question"), :class => "label"
    = language_select(f, @question)
    .description
      = t(".language_tip")
-else
  = f.hidden_field :language, :value => (current_group.language || AppConfig.default_language)

-if current_group.has_adult_content
  .group
    = f.check_box :adult_content, :class => "checkbox"
    = f.label :adult_content, t(".adult_content"), :class => "radio"

-if !@question.new?
  .group
    = f.label :version_message, t("wiki.model.attributes.message"), :class => "label"
    = f.text_field :version_message, :class => "text_field"
-elsif !logged_in?
  = render :partial => "users/anonymous_form"
