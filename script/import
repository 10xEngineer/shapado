#!/usr/bin/env ruby

if !ARGV[0]
  puts "Usage: #{$0} <dirname>"
  exit 1
end

require File.expand_path('../../config/environment', __FILE__)

group_info = JSON.parse(File.read(ARGV[0]+"/groups.json"))

puts "Importing group #{group_info["name"].inspect}..."

db_config = MongoMapper.config[Rails.env]

Dir.glob(ARGV[0]+"/*.json").each do |filepath|
  coll_name = File.basename(filepath, ".json")
  if coll_name == "answers"
    coll_name = "comments"
  end

  opts = "-d '#{db_config["database"]}' -c '#{coll_name}' --file '#{filepath}'"
  if db_config["username"]
    opts << " -u #{db_config["username"]} -p #{db_config["password"]}"
  end

  if db_config["host"]
    opts << " -h #{db_config["host"]}"
  end

  if db_config["port"]
    opts << " --port #{db_config["port"]}"
  end

  cmd = "mongoimport #{opts}"
  system(cmd)
end

puts Group.count

group = Group.first(:subdomain => group_info["subdomain"])
group.domain = AppConfig.domain
group.save!

puts "Updating objects..."
%w[groups users badges comments questions].each do |cname|
  coll = MongoMapper.database.collection(cname)
  coll.find.each do |q|
    %w[activity_at last_target_date created_at updated_at].each do |key|
      if q[key].is_a?(String)
        q[key] = Time.parse(q[key])
      end
    end

    if q["comments"]
      q["comments"].each do |comment|
        %w[created_at updated_at].each do |key|
          if comment[key].is_a?(String)
            comment[key] = Time.parse(comment[key])
          end
        end
      end
    end

    coll.update({:_id => q["_id"]}, q, {:safe => true})
  end
end

group.questions.map{|q| q.save }